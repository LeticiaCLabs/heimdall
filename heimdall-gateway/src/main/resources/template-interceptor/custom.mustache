/*
* Copyright (C) 2018 Conductor Tecnologia SA
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

import br.com.conductor.heimdall.core.enums.InterceptorLifeCycle;
import br.com.conductor.heimdall.gateway.service.LifeCycleService;
import br.com.conductor.heimdall.gateway.filter.HeimdallFilter;

import com.netflix.zuul.context.RequestContext;

import java.util.*;

import static br.com.conductor.heimdall.gateway.util.ConstantsContext.ENVIRONMENT_VARIABLES;

public class CustomInterceptor extends HeimdallFilter {

    private static Set<Long> ignoredOperations;
    private static Set<Long> ignoredResources;
    private static Long referenceId;
    private static Long apiId;
    private static boolean status;
    private Helper helper;

    public CustomInterceptor() {
        referenceId = {{referenceId}};
        apiId = {{apiId}};
        status = {{interceptorStatus}};

        ignoredOperations = new HashSet<>();
        {{#ignoredOperations}}
        ignoredOperations.add({{.}});
        {{/ignoredOperations}}

        ignoredResources = new HashSet<>();
        {{#ignoredResources}}
        ignoredResources.add({{.}});
        {{/ignoredResources}}
    }

    @Override
    public int filterOrder() {
        return {{order}};
    }

    @Override
    public String filterType() {
        return "{{executionPoint}}";
    }

    @Override
    public boolean should() {
        LifeCycleService lifeCycleService = (LifeCycleService) BeanManager.getBean(LifeCycleService.class);
        return lifeCycleService.should(InterceptorLifeCycle.{{lifeCycle}}, referenceId, apiId, ignoredResources, ignoredOperations, status);
    }

    @Override
    public String getName() {
        return "{{name}}"
    }

    @Override
    public void execute() throws Throwable {
        RequestContext context = RequestContext.getCurrentContext();
        Map<String, String> variables = (Map<String, String>) context.get(ENVIRONMENT_VARIABLES);
        if (variables == null) {
            variables = new HashMap<>();
        }
        {{{content}}}
    }

}